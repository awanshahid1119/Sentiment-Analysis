{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "changed-punishment",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:40.397338Z",
     "iopub.status.busy": "2021-07-06T13:40:40.396629Z",
     "iopub.status.idle": "2021-07-06T13:40:40.408064Z",
     "shell.execute_reply": "2021-07-06T13:40:40.408675Z",
     "shell.execute_reply.started": "2021-07-06T13:33:19.399900Z"
    },
    "papermill": {
     "duration": 0.036287,
     "end_time": "2021-07-06T13:40:40.409007",
     "exception": false,
     "start_time": "2021-07-06T13:40:40.372720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "irish-alignment",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:40.439837Z",
     "iopub.status.busy": "2021-07-06T13:40:40.439158Z",
     "iopub.status.idle": "2021-07-06T13:40:42.036298Z",
     "shell.execute_reply": "2021-07-06T13:40:42.036975Z",
     "shell.execute_reply.started": "2021-07-06T13:33:19.412836Z"
    },
    "papermill": {
     "duration": 1.615397,
     "end_time": "2021-07-06T13:40:42.037157",
     "exception": false,
     "start_time": "2021-07-06T13:40:40.421760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "import nltk.tokenize as tokenize\n",
    "import re\n",
    "import string\n",
    "from collections import defaultdict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "annual-flavor",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:42.064301Z",
     "iopub.status.busy": "2021-07-06T13:40:42.063570Z",
     "iopub.status.idle": "2021-07-06T13:40:43.676189Z",
     "shell.execute_reply": "2021-07-06T13:40:43.676868Z",
     "shell.execute_reply.started": "2021-07-06T13:33:19.421976Z"
    },
    "papermill": {
     "duration": 1.627979,
     "end_time": "2021-07-06T13:40:43.677075",
     "exception": false,
     "start_time": "2021-07-06T13:40:42.049096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'A wonderful little production. <br /><br />The filming technique is very unassuming- very old-time-BBC fashion and gives a comforting, and sometimes discomforting, sense of realism to the entire piece. <br /><br />The actors are extremely well chosen- Michael Sheen not only \"has got all the polari\" but he has all the voices down pat too! You can truly see the seamless editing guided by the references to Williams\\' diary entries, not only is it well worth the watching but it is a terrificly written and performed piece. A masterful production about one of the great master\\'s of comedy and his life. <br /><br />The realism really comes home with the little things: the fantasy of the guard which, rather than use the traditional \\'dream\\' techniques remains solid then disappears. It plays on our knowledge and our senses, particularly with the scenes concerning Orton and Halliwell and the sets (particularly of their flat with Halliwell\\'s murals decorating every surface) are terribly well done.'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"../input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\")\n",
    "df=df.iloc[:1000,:]\n",
    "df['review'][1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mysterious-potter",
   "metadata": {
    "papermill": {
     "duration": 0.011715,
     "end_time": "2021-07-06T13:40:43.701001",
     "exception": false,
     "start_time": "2021-07-06T13:40:43.689286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "TEXT CLEANING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "material-guinea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:43.728281Z",
     "iopub.status.busy": "2021-07-06T13:40:43.727609Z",
     "iopub.status.idle": "2021-07-06T13:40:43.746687Z",
     "shell.execute_reply": "2021-07-06T13:40:43.746166Z",
     "shell.execute_reply.started": "2021-07-06T13:33:20.095137Z"
    },
    "papermill": {
     "duration": 0.033745,
     "end_time": "2021-07-06T13:40:43.746830",
     "exception": false,
     "start_time": "2021-07-06T13:40:43.713085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>One of the other reviewers has mentioned that ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I thought this was a wonderful way to spend ti...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basically there's a family where a little boy ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  sentiment\n",
       "0  One of the other reviewers has mentioned that ...          1\n",
       "1  A wonderful little production. <br /><br />The...          1\n",
       "2  I thought this was a wonderful way to spend ti...          1\n",
       "3  Basically there's a family where a little boy ...          0\n",
       "4  Petter Mattei's \"Love in the Time of Money\" is...          1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"sentiment\"].replace({\"positive\":1,\"negative\":0}, inplace =True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "several-vessel",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:43.781359Z",
     "iopub.status.busy": "2021-07-06T13:40:43.780698Z",
     "iopub.status.idle": "2021-07-06T13:40:43.817626Z",
     "shell.execute_reply": "2021-07-06T13:40:43.816835Z",
     "shell.execute_reply.started": "2021-07-06T13:33:20.109156Z"
    },
    "papermill": {
     "duration": 0.058081,
     "end_time": "2021-07-06T13:40:43.817815",
     "exception": false,
     "start_time": "2021-07-06T13:40:43.759734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n",
      "------------------------------------------------------------------------------------------------------------------------\n",
      "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"]\n"
     ]
    }
   ],
   "source": [
    "import string #for punctuation\n",
    "import nltk #natural language tool kit\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "print(string.punctuation)\n",
    "print('------------------------------------------------------------------------------------------------------------------------')\n",
    "print(stopwords.words('english'))\n",
    "redundant_words=['br']\n",
    "def text_cleaning(sentence): #sentence is text(paragraph)\n",
    "    sentence_punc_removed=[letter for letter in sentence if letter not in string.punctuation]\n",
    "    sentence_punc_removed=''.join(sentence_punc_removed) # punctuation removed\n",
    "    #stopwords are filtered out\n",
    "    sentence_clean=[word for word in sentence_punc_removed.split() if word.lower() not in stopwords.words('english')]\n",
    "    # redundant words are filtered out\n",
    "    sentence_clean=[word for word in sentence_clean if word.lower() not in redundant_words ] ##array of words of that sentence\n",
    "    # lemmatization is done here.\n",
    "    final_sentence = [lemmatizer.lemmatize(word.lower()) for word in sentence_clean]\n",
    "    return final_sentence # ARRAY OF WORDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "possible-henry",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:40:43.850932Z",
     "iopub.status.busy": "2021-07-06T13:40:43.850277Z",
     "iopub.status.idle": "2021-07-06T13:41:15.461156Z",
     "shell.execute_reply": "2021-07-06T13:41:15.460568Z",
     "shell.execute_reply.started": "2021-07-06T13:33:20.124326Z"
    },
    "papermill": {
     "duration": 31.629938,
     "end_time": "2021-07-06T13:41:15.461336",
     "exception": false,
     "start_time": "2021-07-06T13:40:43.831398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_clean=df['review'].apply(text_cleaning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lasting-fruit",
   "metadata": {
    "papermill": {
     "duration": 0.01404,
     "end_time": "2021-07-06T13:41:15.488786",
     "exception": false,
     "start_time": "2021-07-06T13:41:15.474746",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "TOKENIZATION / COUNT VECTORIZER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "personalized-density",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:41:15.521778Z",
     "iopub.status.busy": "2021-07-06T13:41:15.521114Z",
     "iopub.status.idle": "2021-07-06T13:41:45.928147Z",
     "shell.execute_reply": "2021-07-06T13:41:45.928643Z",
     "shell.execute_reply.started": "2021-07-06T13:33:44.826126Z"
    },
    "papermill": {
     "duration": 30.425754,
     "end_time": "2021-07-06T13:41:45.928838",
     "exception": false,
     "start_time": "2021-07-06T13:41:15.503084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "#here, we performed data cleaning and count vectorization sequentially altogether !\n",
    "\n",
    "vectorizer=CountVectorizer(analyzer=text_cleaning,dtype='uint8').fit_transform(df['review']) #transforms text into numeric vectorized format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "norman-moscow",
   "metadata": {
    "papermill": {
     "duration": 0.013952,
     "end_time": "2021-07-06T13:41:45.955970",
     "exception": false,
     "start_time": "2021-07-06T13:41:45.942018",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "BUILDING MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "municipal-tuning",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:41:45.988274Z",
     "iopub.status.busy": "2021-07-06T13:41:45.987171Z",
     "iopub.status.idle": "2021-07-06T13:41:46.002965Z",
     "shell.execute_reply": "2021-07-06T13:41:46.003469Z",
     "shell.execute_reply.started": "2021-07-06T13:34:09.427848Z"
    },
    "papermill": {
     "duration": 0.034683,
     "end_time": "2021-07-06T13:41:46.003659",
     "exception": false,
     "start_time": "2021-07-06T13:41:45.968976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'scipy.sparse.csr.csr_matrix'>\n",
      "(1000, 18917)\n"
     ]
    }
   ],
   "source": [
    "print(type(vectorizer)) \n",
    "X=vectorizer.toarray() \n",
    "y=df['sentiment']\n",
    "print(X.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "valued-drove",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:41:46.038382Z",
     "iopub.status.busy": "2021-07-06T13:41:46.036833Z",
     "iopub.status.idle": "2021-07-06T13:41:46.054720Z",
     "shell.execute_reply": "2021-07-06T13:41:46.054162Z",
     "shell.execute_reply.started": "2021-07-06T13:38:03.599663Z"
    },
    "papermill": {
     "duration": 0.037783,
     "end_time": "2021-07-06T13:41:46.054872",
     "exception": false,
     "start_time": "2021-07-06T13:41:46.017089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((200, 18917), (800, 18917), (200,), (800,))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state = 42) \n",
    "X_test.shape,X_train.shape,y_test.shape,y_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "stylish-weekly",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:41:46.087997Z",
     "iopub.status.busy": "2021-07-06T13:41:46.087132Z",
     "iopub.status.idle": "2021-07-06T13:42:09.834576Z",
     "shell.execute_reply": "2021-07-06T13:42:09.835210Z",
     "shell.execute_reply.started": "2021-07-06T13:39:17.264646Z"
    },
    "papermill": {
     "duration": 23.766748,
     "end_time": "2021-07-06T13:42:09.835423",
     "exception": false,
     "start_time": "2021-07-06T13:41:46.068675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13:41:46] WARNING: ../src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[79, 25],\n",
       "       [18, 78]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from xgboost import XGBClassifier\n",
    "my_model = XGBClassifier()\n",
    "my_model.fit(X_train, y_train)\n",
    "predictions = my_model.predict(X_test)\n",
    "cm=confusion_matrix(y_test,predictions)\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "alternate-apparel",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-06T13:42:09.873342Z",
     "iopub.status.busy": "2021-07-06T13:42:09.872550Z",
     "iopub.status.idle": "2021-07-06T13:42:09.876814Z",
     "shell.execute_reply": "2021-07-06T13:42:09.876320Z",
     "shell.execute_reply.started": "2021-07-06T13:39:51.236459Z"
    },
    "papermill": {
     "duration": 0.02485,
     "end_time": "2021-07-06T13:42:09.876986",
     "exception": false,
     "start_time": "2021-07-06T13:42:09.852136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.785"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y_test,predictions)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 99.927181,
   "end_time": "2021-07-06T13:42:11.869747",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-07-06T13:40:31.942566",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
